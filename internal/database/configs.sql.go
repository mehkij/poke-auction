// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configs.sql

package database

import (
	"context"
)

const deleteConfig = `-- name: DeleteConfig :exec
DELETE FROM configs
WHERE server_id = $1 AND key = $2
`

type DeleteConfigParams struct {
	ServerID string
	Key      string
}

func (q *Queries) DeleteConfig(ctx context.Context, arg DeleteConfigParams) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, arg.ServerID, arg.Key)
	return err
}

const getServerConfig = `-- name: GetServerConfig :many
SELECT server_id, key, value, created_at, updated_at FROM configs
WHERE server_id = $1
`

func (q *Queries) GetServerConfig(ctx context.Context, serverID string) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, getServerConfig, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ServerID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertConfig = `-- name: UpsertConfig :exec
INSERT INTO configs (server_id, key, value)
VALUES ($1, $2, $3)
ON CONFLICT (server_id, key) DO UPDATE
SET value = EXCLUDED.value,
    updated_at = now()
`

type UpsertConfigParams struct {
	ServerID string
	Key      string
	Value    string
}

func (q *Queries) UpsertConfig(ctx context.Context, arg UpsertConfigParams) error {
	_, err := q.db.ExecContext(ctx, upsertConfig, arg.ServerID, arg.Key, arg.Value)
	return err
}
