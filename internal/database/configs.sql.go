// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configs.sql

package database

import (
	"context"
)

const deleteConfig = `-- name: DeleteConfig :exec
DELETE FROM configs
WHERE server_id = $1 AND key = $2
`

type DeleteConfigParams struct {
	ServerID int64
	Key      string
}

func (q *Queries) DeleteConfig(ctx context.Context, arg DeleteConfigParams) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, arg.ServerID, arg.Key)
	return err
}

const getAllConfigsForServer = `-- name: GetAllConfigsForServer :many
SELECT key, value FROM configs
WHERE server_id = $1
`

type GetAllConfigsForServerRow struct {
	Key   string
	Value string
}

func (q *Queries) GetAllConfigsForServer(ctx context.Context, serverID int64) ([]GetAllConfigsForServerRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllConfigsForServer, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllConfigsForServerRow
	for rows.Next() {
		var i GetAllConfigsForServerRow
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfig = `-- name: GetConfig :one
SELECT value FROM configs
WHERE server_id = $1 AND key = $2
`

type GetConfigParams struct {
	ServerID int64
	Key      string
}

func (q *Queries) GetConfig(ctx context.Context, arg GetConfigParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getConfig, arg.ServerID, arg.Key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const upsertConfig = `-- name: UpsertConfig :exec
INSERT INTO configs (server_id, key, value)
VALUES ($1, $2, $3)
ON CONFLICT (server_id, key) DO UPDATE
SET value = EXCLUDED.value,
    updated_at = now()
`

type UpsertConfigParams struct {
	ServerID int64
	Key      string
	Value    string
}

func (q *Queries) UpsertConfig(ctx context.Context, arg UpsertConfigParams) error {
	_, err := q.db.ExecContext(ctx, upsertConfig, arg.ServerID, arg.Key, arg.Value)
	return err
}
