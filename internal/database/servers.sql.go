// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package database

import (
	"context"
	"database/sql"
)

const getServer = `-- name: GetServer :one
SELECT id, name, created_at, updated_at FROM servers
WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id int64) (Server, error) {
	row := q.db.QueryRowContext(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertServer = `-- name: UpsertServer :exec
INSERT INTO servers (id, name)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
SET name = EXCLUDED.name,
    updated_at = NOW()
`

type UpsertServerParams struct {
	ID   int64
	Name sql.NullString
}

func (q *Queries) UpsertServer(ctx context.Context, arg UpsertServerParams) error {
	_, err := q.db.ExecContext(ctx, upsertServer, arg.ID, arg.Name)
	return err
}
